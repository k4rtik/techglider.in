<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>redox os on The TechGlider</title><link>techglider.in/tags/redox-os/</link><description>Recent content in redox os on The TechGlider</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 28 Mar 2016 21:37:28 +0000</lastBuildDate><atom:link href="techglider.in/tags/redox-os/index.xml" rel="self" type="application/rss+xml"/><item><title>Reenix</title><link>techglider.in/status/2016/03/28/reenix/</link><pubDate>Mon, 28 Mar 2016 21:37:28 +0000</pubDate><guid>techglider.in/status/2016/03/28/reenix/</guid><description>http://cs.brown.edu/research/pubs/theses/ugrad/2015/light.alex.pdf
Abstract This paper describes the experience, problems and successes found in implementing a unix-like operating system kernel in rust. Using the basic design and much of the lowest-level support code from the Weenix operating system written for CS167/9 I was able to create a basic kernel supporting multiple kernel processes scheduled cooperatively, drivers for the basic devices and the beginnings of a virtual file system. I made note of where the rust programming language, and its safety and type systems, helped and hindered my work and made some, tentative, performance comparisons between the rust and C implementations of this kernel.</description></item></channel></rss>